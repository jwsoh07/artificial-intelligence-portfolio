import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from sklearn.linear_model import LinearRegression
from streamlit_custom_components import st_custom_slider

# Sidebar content
st.sidebar.write("Hello! This page currently features a simple linear regression model on the topic of House Price. There will be an implementation of a multi-variate " +
                 "implementation on this topic with other feature variables to make things more interesting coming soon..")

# Page content
st.subheader("Introduction")
st.write("This simple linear regression model seeks to establish a linear relationship between two variables, namely House Size (independent variable) and " +  
         "House Price (dependent variable). In economy X, where many people are interesting to migrate to, has homes for sale and it would be great that " +
          "people knew how much to save for an initial downpayment to buy a house there. Due to several factors influencing the price of a home, it would " +
          "be really helpful to know what people could tradeoff to mitigate a snowball home loan!")

st.divider()

st.subheader("Data Description")
st.write("The data used for this simple model consists of 100 rows of dummy data generated by ChatGPT that features House Size and it's corresponding output, House Price. " +
         "See table below for dataset.")
# Load the data using Pandas
data = pd.read_csv("data.csv")  # Replace 'data.csv' with the path to your dataset

data

st.divider()

st.subheader("Model Description")

# Extract the input features (X) and the target variable (Y)
X = data[['House_Size']]  # Assuming 'House_Size' is the column name for the independent variable
Y = data['House_Price']  # Assuming 'House_Price' is the column name for the dependent variable

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X, Y)

# Plot the data points
plt.scatter(X, Y, marker="+", color='black', label='Data Points')

# Plot the regression line
plt.plot(X, model.predict(X), color='red', linewidth=1, label='Regression Line')

# Create a formatter function to format the y-axis tick labels with commas
formatter = ticker.StrMethodFormatter("{x:,.0f}")
plt.gca().yaxis.set_major_formatter(formatter)

plt.grid(True)


# Add labels and title to the plot
plt.xlabel('House Size (m^2)')
plt.ylabel('House Price ($)')
plt.title('Bivariate Linear Regression Model for housing price')

# Add a legend
plt.legend()

# Display plot on app
st.pyplot(plt)

st.write("Mathematically, the model is expressed by the equation below")
st.latex("Y = b_0 + b_1X")
st.write("The constant term and cofficient of X represents the line-intercept and the slope of the plot respectively, where the more interesting bit " +
         "being the cofficient term which indicates the amount of increment in housing price given a unit increase in house size. The model has been trained " +
         "on the dataset below which generated the following relationship.")

st.latex("Y = " + str(round(model.intercept_)) + " + " + str(round(model.coef_[0])) + "X")

st.divider()

st.subheader("Price Prediction")
st.caption("Value entered here will be used to provide an estimated price of a house based on the training data provided to the simple linear regression model.")

# Capture user input for prediction
input_house_size = st_custom_slider()

prediction = model.predict(pd.DataFrame({'House_Size': [input_house_size]}))
prediction_formatted = f'${round(prediction[0]):,}'

st.write("The predicted price of a house, based on the OLS model is: "+ prediction_formatted)